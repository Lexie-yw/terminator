# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-12-20 12:14
from __future__ import unicode_literals

from django.db import migrations, models


PERMISSION_RENAMES = [
            ('is_terminologist_in_this_glossary', 'Is terminologist in this glossary', 'specialist', 'Specialist for this glossary'),
            ('is_lexicographer_in_this_glossary', 'Is lexicographer in this glossary', 'terminologist', 'Terminologist for this glossary'),
            ('is_owner_for_this_glossary', 'Is owner for this glossary', 'owner', 'Owner of this glossary'),
]

def permissions_rename_forward(apps, schema_editor):
    Permission = apps.get_model('auth', 'Permission')
    for old_code, old_name, new_code, new_name in PERMISSION_RENAMES:
        try:
            p = Permission.objects.get(codename=old_code)
        except Permission.DoesNotExist:
            print("Permission with codename {} not found!".format(old_code))
            continue
        p.codename = new_code
        p.name = new_name
        p.save()


def permissions_rename_backward(apps, schema_editor):
    Permission = apps.get_model('auth', 'Permission')
    for old_code, old_name, new_code, new_name in PERMISSION_RENAMES:
        try:
            p = Permission.objects.get(codename=new_code)
        except Permission.DoesNotExist:
            print("Permission with codename {} not found!".format(new_code))
            continue
        p.codename = old_code
        p.name = old_name
        p.save()


def roles_rename_forward(apps, schema_editor):
    CollaborationRequest = apps.get_model('terminator', 'CollaborationRequest')
    # The order of the updates is crucial here!
    # old terminologist, new specialist
    CollaborationRequest.objects.filter(collaboration_role='T').update(collaboration_role='S')
    # old lexicographer, new terminologist
    CollaborationRequest.objects.filter(collaboration_role='L').update(collaboration_role='T')


def roles_rename_backward(apps, schema_editor):
    # The order of the updates is crucial here!
    CollaborationRequest = apps.get_model('terminator', 'CollaborationRequest')
    CollaborationRequest.objects.filter(collaboration_role='T').update(collaboration_role='L')
    CollaborationRequest.objects.filter(collaboration_role='S').update(collaboration_role='T')


class Migration(migrations.Migration):

    dependencies = [
        ('terminator', '0022_populate_glossary_other_languages'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='glossary',
            options={'permissions': (
                    ('specialist', 'Specialist for this glossary'),
                    ('terminologist', 'Terminologist for this glossary'),
                    ('owner', 'Owner of this glossary')
                ), 'verbose_name': 'glossary', 'verbose_name_plural': 'glossaries'},
        ),
        migrations.AlterField(
            model_name='collaborationrequest',
            name='collaboration_role',
            field=models.CharField(choices=[
                    ('O', 'Glossary owner'),
                    ('T', 'Terminologist'),
                    ('S', 'Specialist')],
                max_length=2, verbose_name='collaboration role'),
        ),
        migrations.RunPython(permissions_rename_forward, permissions_rename_backward),
        migrations.RunPython(roles_rename_forward, roles_rename_backward),
    ]
